// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ArmPitchByJoystick.h"
#include "../WaveConstants.h"
#include <math.h>
ArmPitchByJoystick::ArmPitchByJoystick() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::armPitchWithPID);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void ArmPitchByJoystick::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void ArmPitchByJoystick::Execute() {
	float output = Robot::oi->getOperatorJoystick()->GetRawAxis(c_armPitchElevate);
//	if(!Robot::armPitchWithPID->isAngleValid())
//	{
//		output = output / 2;
//	}
//	else 
//	{
//	    float currentAngle = Robot::armPitchWithPID->getCurrentAngle();
//	    if((currentAngle <= c_pitchAngleMin) || (currentAngle >= c_pitchAngleMax))
//		output = 0; //Set output to 0 if outside of angle bounds
//	}
	float voltageInput = Robot::armPitchWithPID->pitchAngleSensor->GetVoltage();
	float invertVolts = Robot::armPitchWithPID->pitchAngleSensorInverted->GetVoltage();
//    bool validAngle = Robot::armPitchWithPID->isAngleValid();
    float currentAngle = Robot::armPitchWithPID->getCurrentAngle();
//    std::cout << "Arm: " << output << "\tVolts: " << voltageInput << "\tInvertV: " << invertVolts << "\tAngle(" 
//           /* << (validAngle? "Good":"Bad") << "): "*/ << currentAngle << std::endl;
    if(fabs(output) < 0.2) // change back to .1-.2 after solution found
    {
        output = 0;
    }
	output = output / 2;
    //Note: Up on the joystick give a negative output.
	
	Robot::armPitchWithPID->setPitchMotorOutput(output);
//	std::cout << "Arm Pitch = " << output << std::endl;
}
// Make this return true when this Command no longer needs to run execute()
bool ArmPitchByJoystick::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void ArmPitchByJoystick::End() {
    Robot::armPitchWithPID->pitchMotor->Set(0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ArmPitchByJoystick::Interrupted() {
    End();
}
