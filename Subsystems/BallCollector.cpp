// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "BallCollector.h"
#include "../Robotmap.h"
#include "../Commands/ToggleTopRoller.h"
#include "../Commands/WatchForBall.h"
BallCollector::BallCollector() : Subsystem("BallCollector") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	rollerMotor = RobotMap::ballCollectorRollerMotor;
	catchBallSensor = RobotMap::ballCollectorCatchBallSensor;
	groundBallSensor = RobotMap::ballCollectorGroundBallSensor;
	sensorPower = RobotMap::ballCollectorSensorPower;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void BallCollector::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ToggleTopRoller());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void BallCollector::setRollerOutput(float output)
{
    rollerMotor->Set(output);
    
}
bool BallCollector::isGroundBallSensorTripped()
{
    return (groundBallSensor->Get() == 0 ? true : false);
}
bool BallCollector::isCatchBallSensorTripped()
{
    return (catchBallSensor->Get() == 0 ? true : false);
}
void BallCollector::setSensorPower(bool on){
    sensorPower->Set(on);
}
void BallCollector::runWatchForBall(){
    new WatchForBall();
}
