#include "SetPositionCarry.h"
#include <math.h>
namespace
{
    const double c_timoutSeconds = 30.0; //PID stops after this time
    //Arm Pitch Parameters
    const double c_positionArm = 34.3; //degrees
    const double c_setpointPitchTolerance = 0.02; // volts
    
    //Turret Parameters
    const double c_positionTurret = 90; //degrees
    const double c_setpointTurretTolerance = 0.1; // volts
    
}
SetPositionCarry::SetPositionCarry() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::armPitchWithPID);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::turretWithPID);
	Requires(Robot::claw);
}
// Called just before this Command runs the first time
void SetPositionCarry::Initialize() {
    Robot::claw->closeCharybdis();
    Robot::turretWithPID->setAbsoluteAngle(c_positionTurret);
    Robot::armPitchWithPID->setAbsoluteAngle(c_positionArm);
    SetTimeout(c_timoutSeconds);
}
// Called repeatedly when this Command is scheduled to run
void SetPositionCarry::Execute() {
//      std::cout << "  Arm PID: Actual Volts: " << Robot::armPitchWithPID->pitchAngleSensor->GetAverageVoltage() 
//              << ", Set Volts:" << Robot::armPitchWithPID->GetSetpoint() << " error = " << (Robot::armPitchWithPID->GetSetpoint()-Robot::armPitchWithPID->pitchAngleSensor->GetAverageVoltage()) << ", Output: " << Robot::armPitchWithPID->pitchMotor->Get() << std::endl;
    //  std::cout << "  Turret PID: Actual Volts: " << Robot::turretWithPID->turretAngleSensor->GetAverageVoltage() 
      //        << ", Set Volts:" << Robot::turretWithPID->GetSetpoint() << ", Output: " << Robot::turretWithPID->getPIDOutput() << std::endl;
	
}
// Make this return true when this Command no longer needs to run execute()
bool SetPositionCarry::IsFinished() {
	double c_setpointPitchTolerance = 0.02;
    bool withinArmError = (fabs(Robot::armPitchWithPID->ReturnPIDInput() - Robot::armPitchWithPID->convertAngleToVolts(c_positionArm, false)) < c_setpointPitchTolerance);
    bool withinTurretError = (fabs(Robot::turretWithPID->ReturnPIDInput() - Robot::turretWithPID->convertAngleToVolts(c_positionTurret, false)) < c_setpointTurretTolerance);
    if((withinTurretError && withinArmError) || IsTimedOut())
    {
//        std::cout << "SetPositionFire: Within Turret Err: " << Robot::turretWithPID->ReturnPIDInput() << ", " << Robot::turretWithPID->convertAngleToVolts(c_positionTurret, false)
//                << ", " << fabs(Robot::turretWithPID->ReturnPIDInput() - Robot::turretWithPID->convertAngleToVolts(c_positionTurret, false)) << std::endl;
        return true;
    }
    else
    {
        return false;
    }
}
// Called once after isFinished returns true
void SetPositionCarry::End() {
    //Stop trying to set the position once we've reached it.
    Robot::armPitchWithPID->Disable();
    Robot::turretWithPID->Disable();
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetPositionCarry::Interrupted() {
    End();
}
