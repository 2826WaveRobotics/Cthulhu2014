// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Claw.h"
#include "../Robotmap.h"
#include "../Commands/CollectBall.h"
namespace
{
bool on = true;
bool off = false;
}
Claw::Claw() : Subsystem("Claw") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	claw = RobotMap::clawClaw;
	fang = RobotMap::clawFang;
	tusk = RobotMap::clawTusk;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	m_clawIsOpen = false;
}

void Claw::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	//TODO: Set Default Command TO CollectBall
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Claw::closeClaw()
{
	//std::cout << "Claw::closeClaw" << std::endl;
	claw->Set(off);
	m_clawIsOpen = false;
}
void Claw::openClaw()
{
	//std::cout << "Claw::openClaw" << std::endl;
	claw->Set(on);
	m_clawIsOpen = true;
}
void Claw::openCharybdis()
{
	//std::cout << "Claw::openCharybdis" << std::endl;
	openClaw();
	closeTusk();
	openFang();
	m_charybdisIsOpen = true;
}
void Claw::closeCharybdis()
{
	//std::cout << "Claw::closeCharybdis" << std::endl;
	closeClaw();
	closeTusk();
	closeFang();
	m_charybdisIsOpen = false;
}
void Claw::shootPosition()
{
	//std::cout << "Claw::shootPosition" << std::endl;
	openClaw();
	closeTusk();
	openFang();
}
void Claw::openTusk()
{
	//std::cout << "Claw::openTusk" << std::endl;
	tusk->Set(on);
	m_tuskIsOpen = true;
}
void Claw::closeTusk()
{
	//std::cout << "Claw::closeTusk" << std::endl;
	tusk->Set(off);
	m_tuskIsOpen = false;
}
void Claw::openFang()
{
	//std::cout << "Claw::openFang" << std::endl;
	fang->Set(on);
	m_fangIsOpen = true;
}
void Claw::closeFang()
{
	//std::cout << "Claw::closeFang" << std::endl;
	fang->Set(off);
	m_fangIsOpen = false;
}
bool Claw::isClawOpen()
{
	//std::cout << "Claw::isClawOpen" << std::endl;
	return m_clawIsOpen;
}
bool Claw::isTuskOpen()
{
	//std::cout << "Claw::isTuskOpen" << std::endl;
	return m_tuskIsOpen;
}
bool Claw::isCharybdisOpen()
{
	//std::cout << "Claw::isCharybdisOpen" << std::endl;
	return m_charybdisIsOpen;
}
bool Claw::isFangOpen()
{
	return m_fangIsOpen;
}
