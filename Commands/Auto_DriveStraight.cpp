// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Auto_DriveStraight.h"
#include <math.h>
Auto_DriveStraight::Auto_DriveStraight() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
	m_distanceToDrive = 0;
}
Auto_DriveStraight::Auto_DriveStraight(double distance) {
    Requires(Robot::driveWithPID);
        
    m_distanceToDrive = distance;
}
// Called just before this Command runs the first time
void Auto_DriveStraight::Initialize() {
    //Sets distance and enables PID
        Robot::driveWithPID->setDistance(m_distanceToDrive);
}
// Called repeatedly when this Command is scheduled to run
void Auto_DriveStraight::Execute() {
    Robot::driveWithPID->setDriveOutputPID();
//    std::cout << "Auto_DriveStraight: Execute, calling Robot::driveWithPID->setDriveOutputPID()" << std::endl;
}
// Make this return true when this Command no longer needs to run execute()
bool Auto_DriveStraight::IsFinished() {
    double distanceTravelled = Robot::driveWithPID->driveEncoder->PIDGet();
        //Stop when we've travelled at least 95% of the requested distance 
        //or motor output is less than 5%
        if((distanceTravelled >=  (m_distanceToDrive*0.95)) 
           || (fabs(Robot::driveWithPID->getPIDOutput()) < .05)){
            return true;
        }
        return false;
}
// Called once after isFinished returns true
void Auto_DriveStraight::End() {
    Robot::driveWithPID->setMotorOutput(0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Auto_DriveStraight::Interrupted() {
    End();
}
void Auto_DriveStraight::setDistanceToDrive(double feet) 
{
    m_distanceToDrive = feet;
}
