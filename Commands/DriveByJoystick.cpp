// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveByJoystick.h"
#include <math.h>
#include "../WaveConstants.h"
DriveByJoystick::DriveByJoystick() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveWithPID);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void DriveByJoystick::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
void DriveByJoystick::Execute() {
    float left = Robot::oi->getDriverJoystick()->GetRawAxis(c_arcadeDriveLeft);
    float right = Robot::oi->getDriverJoystick()->GetRawAxis(c_arcadeDriveRight);
    // how much of a dead band do we need?  |
    //                                      V
//    std::cout << "Before fabs ~ Tank Drive: Left=" << left << ", Right=" << right << std::endl;
    if(fabs(left) < 0.1) // change back to .1-.2 after solution found
    {
        left = 0;
    }
    if(fabs(right) < 0.1)
    {
        right = 0; // change to 1 and see if problem persists
    }
    Robot::driveWithPID->setArcadeOutput(left, right);
    Robot::driveWithPID->leftDrive3->Set(Robot::driveWithPID->leftFront->Get()); 
    Robot::driveWithPID->rightDrive3->Set(Robot::driveWithPID->rightFront->Get()); 
//    std::cout << "Tank Drive: Left=" << left << ", Right=" << right << std::endl;
}
// Make this return true when this Command no longer needs to run execute()
bool DriveByJoystick::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void DriveByJoystick::End() {
    Robot::driveWithPID->tankDrive2Motor->ArcadeDrive(0.0, 0.0);
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveByJoystick::Interrupted() {
    Robot::driveWithPID->tankDrive2Motor->ArcadeDrive(0.0, 0.0);
}
