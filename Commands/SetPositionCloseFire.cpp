#include "SetPositionCloseFire.h"
#include <math.h>
namespace
{
    const double c_timoutSeconds = 3.0; //PID stops after this time:give jess candy please
    //Arm Pitch Parameters
    const double c_positionArm = 39; //degrees
    const double c_setpointPitchTolerance = 0.02; // volts
}
SetPositionCloseFire::SetPositionCloseFire() {
	// Use requires() here to declare subsystem dependencies... 
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::armPitchWithPID);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void SetPositionCloseFire::Initialize() {
	Robot::ballCollector->setRollerOutput(0);
    Robot::armPitchWithPID->setAbsoluteAngle(c_positionArm);
    SetTimeout(c_timoutSeconds);
}
// Called repeatedly when this Command is scheduled to run
void SetPositionCloseFire::Execute() {
//      std::cout << "  Arm PID: Actual Volts: " << Robot::armPitchWithPID->pitchAngleSensor->GetAverageVoltage() 
//              << ", Set Volts:" << Robot::armPitchWithPID->GetSetpoint() << ", Output: " << Robot::armPitchWithPID->pitchMotor->Get() << std::endl;
}
// Make this return true when this Command no longer needs to run execute()
bool SetPositionCloseFire::IsFinished() {
    
	double c_setpointPitchTolerance = 0.02;
	bool withinArmError = (fabs(Robot::armPitchWithPID->ReturnPIDInput() - Robot::armPitchWithPID->convertAngleToVolts(c_positionArm, false)) < c_setpointPitchTolerance);
    if(withinArmError || IsTimedOut())
    {
        return true;
    }
    else
    {
        return false;
    }
}
// Called once after isFinished returns true
void SetPositionCloseFire::End() {
    //Stop trying to set the position once we've reached it.
    Robot::armPitchWithPID->Disable();
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetPositionCloseFire::Interrupted() {
    End();
}
