// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveStraightByTime.h"
DriveStraightByTime::DriveStraightByTime() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveWithPID);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_driveTime = 0;
	m_driveSpeed = 0;
	m_firstExecute = true;
}
DriveStraightByTime::DriveStraightByTime(double seconds, double speed) {
    Requires(Robot::driveWithPID);
    m_driveTime = seconds;
    m_driveSpeed = -speed; //Note: Need negative speed to drive forward
}
// Called just before this Command runs the first time
void DriveStraightByTime::Initialize() {
//    std::cout << "DriveStraightByTime::Execute" << std::endl;
	SetTimeout(m_driveTime);
}
// Called repeatedly when this Command is scheduled to run
void DriveStraightByTime::Execute() {
    if(m_firstExecute)
    {
        SetTimeout(m_driveTime);
        m_firstExecute = false;
//        std::cout << "                            DriveStraightByTime::Execute - First Call: " << m_driveTime <<std::endl;
    }
//    std::cout << "DriveStraightByTime::Execute" << std::endl;
	Robot::driveWithPID->setTankOutput(m_driveSpeed, m_driveSpeed);
}
// Make this return true when this Command no longer needs to run execute()
bool DriveStraightByTime::IsFinished() {
//    std::cout << "DriveStraightByTime::IsFinished(): " << std::endl;
	return IsTimedOut();
//    return false;
}
// Called once after isFinished returns true
void DriveStraightByTime::End() {
//    std::cout << "DriveStraightByTime::End" << std::endl;
    Robot::driveWithPID->setTankOutput(0, 0);
    m_firstExecute = true; //may or may not help
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveStraightByTime::Interrupted() {
//    std::cout << "DriveStraightByTime::Interrupt" << std::endl;
    End();
}
