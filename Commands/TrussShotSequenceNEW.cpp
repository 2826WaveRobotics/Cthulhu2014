// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.



#include "TrussShotSequenceNEW.h"
#include "../WaveConstants.h"
#include "../Commands/CharybdisClose.h"
#include "../Commands/WinchPin.h"
#include "../Commands/WaveWait.h"
#include "../Commands/AutoWinch.h"
#include "../Commands/ClawOpen.h"
#include "../Commands/FangOpen.h"
#include "../Commands/TuskClose.h"
#include "../Commands/RunCollector.h"
#include "../Commands/WatchForBall.h"
#include "../Commands/SetPositionCarry.h"


TrussShotSequenceNEW::TrussShotSequenceNEW() {
    // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
    
    AddSequential(new CharybdisClose()); // close everything so that there is less power
    AddSequential(new WinchPin(c_releasePin)); // release the firing pin
    AddSequential(new SetPositionCarry());
    //AddSequential(new WaveWait(0.5)); // wait for firing to occur before resetting pin
    AddSequential(new WinchPin(c_setPin)); // reset the firing pin
    AddParallel(new AutoWinch()); // auto winch it back
    
    AddSequential(new ClawOpen());
    AddSequential(new FangOpen());
    AddSequential(new TuskClose());
    
//    AddSequential(new RunCollector());
//    AddSequential(new WatchForBall());
//    std::cout << "Roller running and waiting for a new ball" << std::endl;
}
