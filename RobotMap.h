// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef ROBOTMAP_H
#define ROBOTMAP_H
#include "WPILib.h"
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
class RobotMap {
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static SpeedController* armPitchWithPIDPitchMotor;
	static AnalogChannel* armPitchWithPIDPitchAngleSensor;
	static AnalogChannel* armPitchWithPIDPitchAngleSensorInverted;
	static Solenoid* clawClaw;
	static Solenoid* clawFang;
	static Solenoid* clawTusk;
	static SpeedController* ballCollectorRollerMotor;
	static DigitalInput* ballCollectorCatchBallSensor;
	static DigitalInput* ballCollectorGroundBallSensor;
	static Solenoid* ballCollectorSensorPower;
	static Compressor* compressorSubSystemCompressor;
	static AnalogChannel* compressorSubSystemTankPressure;
	static Encoder* driveWithPIDDriveEncoder;
	static SpeedController* driveWithPIDLeftFront;
	static SpeedController* driveWithPIDRightFront;
	static RobotDrive* driveWithPIDTankDrive2Motor;
	static Solenoid* driveWithPIDDriveShift;
	static SpeedController* driveWithPIDLeftDrive3;
	static SpeedController* driveWithPIDRightDrive3;
	static SpeedController* shooterWinchMotor;
	static DigitalInput* shooterBrandingIronSensor;
	static Solenoid* shooterWinchPin;
	static AnalogChannel* turretWithPIDTurretAngleSensor;
	static AnalogChannel* turretWithPIDTurretAngleSensorInverted;
	static SpeedController* turretWithPIDTurretMotor;
	static DigitalOutput* lightsLight1;
	static DigitalOutput* lightsLight2;
	static DigitalOutput* lightsLight4;
	static DigitalOutput* lightsLight8;
	static Solenoid* driveWithPIDDropDownCaster;
	
	static void init();
};
#endif
