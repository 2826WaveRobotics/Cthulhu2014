#include "DriveWithPID.h"
#include "../Robotmap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "../Commands/DriveByJoystick.h"
namespace
{
	bool on = true;
    bool off = false;
}
DriveWithPID::DriveWithPID() : PIDSubsystem("DriveWithPID", 1.0, 0.0, 0.0) {
	SetAbsoluteTolerance(0.2);
	GetPIDController()->SetContinuous(true);
	LiveWindow::GetInstance()->AddActuator("DriveWithPID", "PIDSubsystem Controller", GetPIDController());
    
	driveEncoder = RobotMap::driveWithPIDDriveEncoder;
	leftFront = RobotMap::driveWithPIDLeftFront;
	rightFront = RobotMap::driveWithPIDRightFront;
	tankDrive2Motor = RobotMap::driveWithPIDTankDrive2Motor;
	driveShift = RobotMap::driveWithPIDDriveShift;
	leftDrive3 = RobotMap::driveWithPIDLeftDrive3;
	rightDrive3 = RobotMap::driveWithPIDRightDrive3;
	dropDownCaster = RobotMap::driveWithPIDDropDownCaster;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	m_feetToDrive = 0;
    m_distanceDriven = 0;
	    
    shiftGear(true); //initially in LOW gear
    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}
double DriveWithPID::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return driveEncoder->PIDGet();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}
void DriveWithPID::setDriveOutputPID()
{
    //Wave - Add the other motors here. leftFront output is set in PIDController::Calculate()
    float motorVal = GetPIDController()->Get();
    leftFront->Set(motorVal);
    rightFront->Set(motorVal);
}
void DriveWithPID::UsePIDOutput(double output) {
	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	leftFront->PIDWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}
void DriveWithPID::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveByJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void DriveWithPID::setDistance(double feet)
{
    m_feetToDrive = feet;
    
    //Wave - Now somehow send this informaition to the PID
    PIDController *pid = GetPIDController();
    pid->Reset();
    pid->SetSetpoint(m_feetToDrive * 12);
    pid->Enable();
}
void DriveWithPID::shiftGear(bool toLow)
{
    if(toLow)
    {
        driveShift->Set(off);
        m_currentlyInLow = true;
    }
    else
    {
        driveShift->Set(on);
        m_currentlyInLow = false;
    }
}
void DriveWithPID::toggleDropDown(bool toDrop)
{
	if(toDrop)
	{
		dropDownCaster->Set(off);
		m_currentlyDroppedDown = true;
	}
	else
	{
		dropDownCaster->Set(on);
		m_currentlyDroppedDown = false;
	}
}
void DriveWithPID::setMotorOutput(float output)
{
    leftFront->Set(output);
    leftDrive3->Set(output);
    rightFront->Set(output);
    rightDrive3->Set(output);
}
double DriveWithPID::getPIDOutput()
{
    return GetPIDController()->Get();
}
void DriveWithPID::setTankOutput(float left, float right){
//    std::cout << "DriveWithPID::setTankOutput  left=" << left << ", right=" << right << std::endl;
    tankDrive2Motor->TankDrive(left, right);
    leftDrive3->Set(leftFront->Get());
    rightDrive3->Set(rightFront->Get());
}
void DriveWithPID::setArcadeOutput(float left, float right){
//    std::cout << "DriveWithPID::setArcadeOutput  left=" << left << ", right=" << right << std::endl;
    tankDrive2Motor->ArcadeDrive(left, right);
    leftDrive3->Set(leftFront->Get());
    rightDrive3->Set(rightFront->Get());
}
