// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "WatchForGroundBall.h"
#include "WaveWait.h"
WatchForGroundBall::WatchForGroundBall() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::claw);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    Requires(Robot::ballCollector);
}
// Called just before this Command runs the first time
void WatchForGroundBall::Initialize() {
    m_alreadyHaveBall = false;
    Robot::ballCollector->setRollerOutput(1); 
    SetTimeout(4.0);
}
// Called repeatedly when this Command is scheduled to run
void WatchForGroundBall::Execute() {
    bool ballIsThere = Robot::ballCollector->isGroundBallSensorTripped();
    
    if(ballIsThere && !m_alreadyHaveBall){
        m_alreadyHaveBall = true;
        WaveWait(.6);
        Robot::claw->closeCharybdis();
//        Robot::ballCollector->setRollerOutput(0);
    }
    
//    if(!ballIsThere){
////      std::cout << "No ball there" << std::endl;
//        m_alreadyHaveBall = false;
//        Robot::ballCollector->setRollerOutput(1);
//    }
}
// Make this return true when this Command no longer needs to run execute()
bool WatchForGroundBall::IsFinished() {
    return (m_alreadyHaveBall || IsTimedOut());
}
// Called once after isFinished returns true
void WatchForGroundBall::End() {
	Robot::ballCollector->setRollerOutput(.5);
	WaveWait(.5);
    Robot::ballCollector->setRollerOutput(0);
//    std::cout << "Watching is finished..." << std::endl;	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void WatchForGroundBall::Interrupted() {
    End();
}
