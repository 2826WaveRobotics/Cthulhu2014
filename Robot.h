// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef _ROBOT_H
#define _ROBOT_H
#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "WaveConstants.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/Autonomous_Command.h"
#include "Subsystems/ArmPitchWithPID.h"
#include "Subsystems/BallCollector.h"
#include "Subsystems/Claw.h"
#include "Subsystems/CompressorSubSystem.h"
#include "Subsystems/DashboardUpdater.h"
#include "Subsystems/DriveWithPID.h"
#include "Subsystems/Shooter.h"
#include "Subsystems/TurretWithPID.h"
#include "Subsystems/Lights.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"
class Robot : public IterativeRobot {
public:
    Command *autonomousCommand;
    static OI *oi;
    LiveWindow *lw;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static ArmPitchWithPID* armPitchWithPID;
	static Claw* claw;
	static BallCollector* ballCollector;
	static CompressorSubSystem* compressorSubSystem;
	static DashboardUpdater* dashboardUpdater;
	static DriveWithPID* driveWithPID;
	static Shooter* shooter;
	static TurretWithPID* turretWithPID;
	static Lights* lights;
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    virtual void RobotInit();
    virtual void AutonomousInit();
    virtual void AutonomousPeriodic();
    virtual void TeleopInit();
    virtual void TeleopPeriodic();
    virtual void TestPeriodic();
    virtual void DisabledInit();
    virtual void DisabledPeriodic();
    
private:
    int m_1secLoopCounter;
    int m_button;
    Command *m_commandFire;
    Command *m_commandTruss;
    Command *m_commandLoadLeft;
    Command *m_commandLoadRight;
    
    float m_lastShift;
    float m_lastDropDown;
    float m_lastFire;
    float m_lastDpadLeft;
    float m_lastDpadRight;
    float m_lastTruss;
};
#endif
